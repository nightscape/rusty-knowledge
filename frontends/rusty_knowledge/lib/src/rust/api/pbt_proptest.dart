// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'repository.dart';

/// Run Flutter PBT with random proptest generation
///
/// This runs multiple test cases, each with random transitions generated by proptest.
/// Each case:
/// - Starts with empty MemoryBackend (reference) and Flutter UI (SUT)
/// - Generates N random transitions (create, update, delete, move)
/// - Applies each to both backends
/// - Verifies they stay in sync after each step
///
/// # Arguments
/// * `num_cases` - Number of test cases to run (e.g., 10-20)
/// * `steps_per_case` - Number of transitions per case (e.g., 10-20)
/// * `test_id` - Unique test identifier for logging
/// * `get_blocks` - Callback to read current UI state
/// * `create_block` - Callback to create a block (id, parent_id, content)
/// * `update_block` - Callback to update a block (id, content)
/// * `delete_block` - Callback to delete a block (id)
/// * `move_block` - Callback to move a block (id, new_parent_id)
///
/// # Returns
/// * `Ok(summary)` - Success message with statistics
/// * `Err(error)` - Detailed failure message with case number and error
Future<String> runFlutterPbtProptest({
  required int numCases,
  required BigInt stepsPerCase,
  required String testId,
  required FutureOr<List<Block>> Function() getBlocks,
  required FutureOr<void> Function(String, String, String) createBlock,
  required FutureOr<void> Function(String, String) updateBlock,
  required FutureOr<void> Function(String) deleteBlock,
  required FutureOr<void> Function(String, String) moveBlock,
}) => RustLib.instance.api.crateApiPbtProptestRunFlutterPbtProptest(
  numCases: numCases,
  stepsPerCase: stepsPerCase,
  testId: testId,
  getBlocks: getBlocks,
  createBlock: createBlock,
  updateBlock: updateBlock,
  deleteBlock: deleteBlock,
  moveBlock: moveBlock,
);
