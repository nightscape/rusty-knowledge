use super::flutter_pbt_backend::FlutterPbtBackend;
use super::flutter_pbt_runner::run_proptest_cases;
use super::types::Block;
/// FRB-friendly API for running Flutter property-based tests
///
/// This module provides functions that Dart can call via flutter_rust_bridge
/// to run the full proptest infrastructure against the Flutter UI.
use flutter_rust_bridge::DartFnFuture;
use std::sync::Arc;

/// Run Flutter PBT with random proptest generation
///
/// This runs multiple test cases, each with random transitions generated by proptest.
/// Each case:
/// - Starts with empty MemoryBackend (reference) and Flutter UI (SUT)
/// - Generates N random transitions (create, update, delete, move)
/// - Applies each to both backends
/// - Verifies they stay in sync after each step
///
/// # Arguments
/// * `num_cases` - Number of test cases to run (e.g., 10-20)
/// * `steps_per_case` - Number of transitions per case (e.g., 10-20)
/// * `test_id` - Unique test identifier for logging
/// * `get_blocks` - Callback to read current UI state
/// * `create_block` - Callback to create a block (id, parent_id, content)
/// * `update_block` - Callback to update a block (id, content)
/// * `delete_block` - Callback to delete a block (id)
/// * `move_block` - Callback to move a block (id, new_parent_id)
///
/// # Returns
/// * `Ok(summary)` - Success message with statistics
/// * `Err(error)` - Detailed failure message with case number and error
pub async fn run_flutter_pbt_proptest(
    num_cases: u32,
    steps_per_case: usize,
    test_id: String,
    get_blocks: impl Fn() -> DartFnFuture<Vec<Block>> + Send + Sync + 'static,
    create_block: impl Fn(String, String, String) -> DartFnFuture<()> + Send + Sync + 'static,
    update_block: impl Fn(String, String) -> DartFnFuture<()> + Send + Sync + 'static,
    delete_block: impl Fn(String) -> DartFnFuture<()> + Send + Sync + 'static,
    move_block: impl Fn(String, String) -> DartFnFuture<()> + Send + Sync + 'static,
) -> String {
    eprintln!("\n========================================");
    eprintln!("üß™ Flutter PBT Proptest");
    eprintln!("   Test ID: {}", test_id);
    eprintln!("   Cases: {}", num_cases);
    eprintln!("   Steps per case: {}", steps_per_case);
    eprintln!("========================================\n");

    // Wrap callbacks in Arc for cloning
    let get_blocks = Arc::new(get_blocks);
    let create_block = Arc::new(create_block);
    let update_block = Arc::new(update_block);
    let delete_block = Arc::new(delete_block);
    let move_block = Arc::new(move_block);

    // Factory function to create FlutterPbtBackend for each test case
    let backend_factory = move |case_num: u32| {
        let case_test_id = format!("{}-case-{}", test_id, case_num);

        FlutterPbtBackend::new(
            case_test_id,
            get_blocks.clone(),
            create_block.clone(),
            update_block.clone(),
            delete_block.clone(),
            move_block.clone(),
        )
    };

    // Run all test cases
    match run_proptest_cases(num_cases, steps_per_case, backend_factory).await {
        Ok(summary) => {
            eprintln!("\n========================================");
            eprintln!("‚úÖ {}", summary);
            eprintln!("========================================\n");
            summary
        }
        Err(error) => {
            eprintln!("\n========================================");
            eprintln!("‚ùå {}", error);
            eprintln!("========================================\n");
            format!("FAILED: {}", error)
        }
    }
}
